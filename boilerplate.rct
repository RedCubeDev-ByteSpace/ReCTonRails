package sys; use sys;

/*
 * ReCT On Rails - Boilerplate ReCT Code
 * Do NOT Edit this file! It is Essential for RoR to work!
 * (c)2021 RedCube - Bytespace.tk
 */

//read in essentials
var f_essentials <- io::ReadFile("./essentials");
var arr_essentials <- f_essentials->Split(Char(10));
set mode <- arr_essentials[0];
set url <- arr_essentials[1];
set private_uuid <- arr_essentials[2];
set domain <- arr_essentials[3];

//read in Request Data
set form_keys <- make string array(0); set form_values <- make string array(0); 
set cookie_keys <- make string array(0); set cookie_values <- make string array(0); 
set file_keys <- make string array(0); set file_values <- make string array(0);

//forms
var f_form <- io::ReadFile("./Form"); form_keys <- parseKeyValue(true, f_form); form_values <- parseKeyValue(false, f_form);
//cookies
var f_cookies <- io::ReadFile("./Cookies"); cookie_keys <- parseKeyValue(true, f_cookies); cookie_values <- parseKeyValue(false, f_cookies);
//files
var f_files <- io::ReadFile("./Files"); file_keys <- parseKeyValue(true, f_files); file_values <- parseKeyValue(false, f_files);

function parseKeyValue(OddOrEven bool, file string) stringArr { var ooe <- OddOrEven; var out <- make string array(0); var arr <- make string array(0); var current <- ""; from (i <- 0) to file->GetLength() - 1 { if (i >= 35) if (file->Substring(i-35,36) = private_uuid) { arr->Push(current->Substring(0,current->GetLength() - 35)); current <- ""; continue; } current <-+ file->Substring(i,1);} from (i <- 0) to arr->GetLength() - 1 { if (ooe) { out->Push(arr[i]); } ooe <- !ooe; } return out;}

//standard RoR functions
function FieldExists(name string) bool { return (GetField(name) != "") }
function GetField(name string) string { from (i <- 0) to form_keys->GetLength() - 1 { if ((form_keys[i]) = name) return form_values[i]; } return ""; }

function CookieExists(name string) bool { return (GetCookie(name) != "") }
function GetCookie(name string) string { from (i <- 0) to cookie_keys->GetLength() - 1 { if ((cookie_keys[i]) = name) return cookie_values[i]; } return ""; }
function SetCookie(name string, value string, exprireInSecond int) { Write(private_uuid + ";"+ name + private_uuid + "," + value + private_uuid + ":" + string(exprireInSecond) + private_uuid + ";"); }

function UploadExists(name string) bool { return (GetUpload(name) != "") }
function GetUpload(name string) string { from (i <- 0) to file_keys->GetLength() - 1 { if ((file_keys[i]) = name) return file_values[i]; } return ""; }

function Escape(text string) string { return text->Replace("<", "&lt;")->Replace(">", "&gt;"); }
function Stop() { Write(private_uuid + "!"); }

//page code: